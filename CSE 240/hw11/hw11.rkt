; CSE240 HW11 Spring 2019
; NOTE : make sure to select R5RS in the bottom left corner before running code

; Q1 (5 points)
(+(- 9 2)5)
(-(* 5(+(+ 6 12)5))25)
(* 7(+(- 5(* 1 3))(* 2 4)))
(* 3(+ 4(/(+(* 6 6)(* 6 6))(+ 10 2))))
(+(+(/(-(/(/(*(+ 4 6)(+ 6 4))2)2)5)2))(+(/(+(* 4 5)(* 5 4))2)(* 4 5)))
; Q2 (5 points)
(define Add(lambda(x y)
             (+ x y)
))
; Q3 (10 points)
(define Square(lambda(n) ; size n problem
                (if (= n 0); stopping condition and its return value
                    0
                    (Add(Square(-(abs n) 1)) (-(* 2(abs n)) 1)) ; size m problem ; construct solution from size n
)
))
; Q4 (5 points)
(define ReadForSquare(lambda()
                       (Square(read))
))
; Q5 (10 points)
(define DiffSquares(lambda()
                     (abs(- (ReadForSquare)(ReadForSquare)))
))
; Q6 (5 points)
(define AddLet(lambda(x y z)
                (let ((Value (lambda(a b)
                               (+ a b)
)))
                  (+(Value x y) (Value 0 z))
)))
; Q7 (5 points)
((lambda(x y z)
   (+(+ x y)z))
 60 40 5
)
;Q8: (10 points)
(define sumOdds(lambda(lst)
  (if(null? lst)
      0
  (if(Odd? (car lst))
      (+(car lst)(sumOdds(cdr lst)))
  (if(Even? (car lst))
     (sumOdds(cdr lst))
)))
))
(sumOdds '(1 3 4 5 6 -7))
((lambda(lst)
        (sumOdds lst)
)
   '(1 3 4 5 6 -7))